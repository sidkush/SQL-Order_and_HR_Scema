USE HR;

#QUESTION 1
#Q.no(1).List details of customers who have not placed any order.
SELECT OC.CUSTOMER_ID, CUSTOMER_FNAME, CUSTOMER_LNAME, CUSTOMER_EMAIL, CUSTOMER_PHONE, ADDRESS_ID, CUSTOMER_CREATION_DATE, CUSTOMER_USERNAME, CUSTOMER_GENDER
FROM ORDER_HEADER OH
RIGHT JOIN ONLINE_CUSTOMER OC 
ON OC.CUSTOMER_ID = OH.CUSTOMER_ID
WHERE OH.CUSTOMER_ID IS NULL;

#QUESTION 2
#Q.no(2).Display all the departments that have a minimum salary greater than that of department 50.
SELECT DISTINCT(DEPARTMENT_NAME),D.DEPARTMENT_ID
FROM EMPLOYEES E, DEPARTMENTS D, JOBS J
WHERE D.DEPARTMENT_ID=E.DEPARTMENT_ID AND E.JOB_ID=J.JOB_ID AND J.MIN_SALARY>(SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID=50);

#QUESTION 3
#Q.no(3).List the product description, class description and price of all products which are shipped.
SELECT PRODUCT_DESC, PRODUCT_CLASS_DESC, PRODUCT_PRICE
FROM PRODUCT P, ORDER_ITEMS OI, PRODUCT_CLASS PC, ORDER_HEADER OH
WHERE P.PRODUCT_CLASS_CODE=PC.PRODUCT_CLASS_CODE AND P.PRODUCT_ID=OI.PRODUCT_ID AND OI.ORDER_ID = OH.ORDER_ID AND OH.ORDER_STATUS='Shipped';

#QUESTION 4
#Q.no(4).List customer name, email and order details (order id, product desc, qty, subtotal) for all customers even if they have not ordered any item.
SELECT CONCAT(CUSTOMER_FNAME,' ',CUSTOMER_LNAME) AS CUSTOMER_NAME, CUSTOMER_EMAIL, OH.ORDER_ID, PRODUCT_DESC, PRODUCT_QUANTITY, (PRODUCT_PRICE*PRODUCT_QUANTITY) AS SUBTOTAL
FROM ONLINE_CUSTOMER OC 
LEFT JOIN ORDER_HEADER OH ON OC.CUSTOMER_ID=OH.CUSTOMER_ID 
LEFT JOIN ORDER_ITEMS OI ON OI.ORDER_ID=OH.ORDER_ID 
LEFT JOIN PRODUCT P ON P.PRODUCT_ID=OI.PRODUCT_ID;

#QUESTION 5
#Q.no(5).Display the product details as per the following criteria and sort them in descending order of category:
         #a.	If the category is 2050, increase the price by 2000.
         #b.	If the category is 2051, increase the price by 500.
         #c.	If the category is 2052, increase the price by 600.
SELECT PRODUCT_ID, PRODUCT_DESC, PRODUCT_CLASS_CODE, PRODUCT_PRICE, 
(CASE 			
	WHEN (PRODUCT_CLASS_CODE=2050) THEN PRODUCT_PRICE+2000
    WHEN (PRODUCT_CLASS_CODE=2051) THEN PRODUCT_PRICE+500
    WHEN (PRODUCT_CLASS_CODE=2052) THEN PRODUCT_PRICE+600
    ELSE PRODUCT_PRICE
END) AS NEW_PRICE,
PRODUCT_QUANTITY_AVAIL, LEN, WIDTH, HEIGHT, WEIGHT
FROM PRODUCT
ORDER BY PRODUCT_CLASS_CODE DESC;

#QUESTION 6
#Q.no(6).List customer full name and order details (order no, date, product class desc, product desc, subtotal, shipper name) for orders shipped to cities 
         #whose pin codes do not have any 0s in them. Sort the output on customer name, order date and subtotal.
SELECT CONCAT(CUSTOMER_FNAME,' ',CUSTOMER_LNAME) AS CUSTOMER_NAME, OH.ORDER_ID, ORDER_DATE, PRODUCT_CLASS_DESC, PRODUCT_DESC, (PRODUCT_PRICE*PRODUCT_QUANTITY) AS SUBTOTAL, SHIPPER_NAME
FROM ONLINE_CUSTOMER OC 
JOIN ADDRESS A ON A.ADDRESS_ID = OC.ADDRESS_ID
JOIN ORDER_HEADER OH ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
JOIN SHIPPER S ON S.SHIPPER_ID = OH.SHIPPER_ID
JOIN ORDER_ITEMS OT ON OT.ORDER_ID = OH.ORDER_ID
JOIN PRODUCT P ON P.PRODUCT_ID = OT.PRODUCT_ID
JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE
WHERE A.PINCODE NOT LIKE ('%0%')
ORDER BY CUSTOMER_NAME, ORDER_DATE, SUBTOTAL;

#QUESTION 7
#Q.no(7).List customers from outside Karnataka who haven’t bought any toys or books.
SELECT DISTINCT CONCAT(CUSTOMER_FNAME,' ',CUSTOMER_LNAME) AS CUSTOMER_NAME
FROM ONLINE_CUSTOMER OC
JOIN ADDRESS A ON A.ADDRESS_ID = OC.ADDRESS_ID
JOIN ORDER_HEADER OH ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
JOIN ORDER_ITEMS OT ON OT.ORDER_ID = OH.ORDER_ID
JOIN PRODUCT P ON P.PRODUCT_ID = OT.PRODUCT_ID
JOIN PRODUCT_CLASS PC ON PC.PRODUCT_CLASS_CODE = P.PRODUCT_CLASS_CODE
WHERE A.STATE NOT IN ('Karnataka') AND PRODUCT_CLASS_DESC NOT IN ('Toys','Books');


#QUESTION 8
#Q.no(8).Show inventory status of products as below as per their available quantity:
         #a.	For Electronics and Computer categories, if available quantity is < 10, show 'Low stock', 11 < qty < 30, show 'In stock', > 31, show 'Enough stock'
         #b.	For Stationery and Clothes categories, if qty < 20, show 'Low stock', 21 < qty < 80, show 'In stock', > 81, show 'Enough stock'
         #c.	Rest of the categories, if qty < 15 – 'Low Stock', 16 < qty < 50 – 'In Stock', > 51 – 'Enough stock'
		 #For all categories, if available quantity is 0, show 'Out of stock'.
SELECT PRODUCT_DESC,
(CASE
		WHEN PRODUCT_QUANTITY_AVAIL<10 THEN "LOW STOCK"
        WHEN PRODUCT_QUANTITY_AVAIL BETWEEN 10 AND 30 THEN "IN STOCK"
        WHEN PRODUCT_QUANTITY_AVAIL>30 THEN "ENOUGH STOCK"
END) AS INVENTORY
FROM PRODUCT P 
JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE
WHERE PC.PRODUCT_CLASS_DESC IN ('Electronics','Computer')

UNION

SELECT PRODUCT_DESC, 
(CASE
		WHEN PRODUCT_QUANTITY_AVAIL<20 THEN "LOW STOCK"
        WHEN PRODUCT_QUANTITY_AVAIL BETWEEN 20 AND 80 THEN "IN STOCK"
        WHEN PRODUCT_QUANTITY_AVAIL>80 THEN "ENOUGH STOCK"
END) AS INVENTORY
FROM PRODUCT P 
JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE
WHERE PC.PRODUCT_CLASS_DESC IN ('Stationary','Clothes')

UNION

SELECT PRODUCT_DESC,
(CASE
		WHEN PRODUCT_QUANTITY_AVAIL<15 THEN "LOW STOCK"
        WHEN PRODUCT_QUANTITY_AVAIL BETWEEN 15 AND 50 THEN "IN STOCK"
        WHEN PRODUCT_QUANTITY_AVAIL>50 THEN "ENOUGH STOCK"
END) AS INVENTORY
FROM PRODUCT P 
JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE
WHERE PC.PRODUCT_CLASS_DESC NOT IN ('Electronics','Computer','Stationary','Clothes');


#QUESTION 9
#Q.no(9).List the details of customers who bought more than ten (i.e. total order qty) products per order.
SELECT DISTINCT(CONCAT(CUSTOMER_FNAME,' ',CUSTOMER_LNAME)) AS CUSTOMER_NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE, CUSTOMER_USERNAME, CUSTOMER_GENDER
FROM ONLINE_CUSTOMER OC
JOIN ORDER_HEADER OH ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
JOIN ORDER_ITEMS OT ON OT.ORDER_ID = OH.ORDER_ID
JOIN (SELECT ORDER_ID,SUM(PRODUCT_QUANTITY) FROM ORDER_ITEMS  GROUP BY ORDER_ID HAVING SUM(PRODUCT_QUANTITY)>10)
AS TEN ON TEN.ORDER_ID = OH.ORDER_ID;



